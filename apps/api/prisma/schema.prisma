generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionType {
  FREE
  BASIC
  PRO
}

enum TokenType {
  PASSWORD_RECOVER
}

enum AccountProvider {
  GITHUB
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

model User {
  id               String           @id @default(uuid())
  name             String?
  email            String           @unique
  passwordHash     String?          @map("password_hash")
  avatarUrl        String?          @map("avatar_url")
  birthday         DateTime?
  subscription     SubscriptionType @default(FREE)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  preferredGateway String?

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  subscriptions      Subscription[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites             Invite[]
  members             Member[]
  plans               Plan[]
  integrations        Integration[]
  gatewayTransactions GatewayTransaction[]
  products            Product[]

  Widget Widget[]

  @@map("organizations")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  price       Float
  duration    Int
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  subscriptions  Subscription[]
  Organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map("plans")
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String             @map("user_id")
  planId           String             @map("plan_id")
  startDate        DateTime           @map("start_date")
  endDate          DateTime           @map("end_date")
  status           SubscriptionStatus @default(ACTIVE)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  trialEndsAt      DateTime?          @map("trial_ends_at")
  gatewayProvider  String
  gatewayReference String?            @map("gateway_reference")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id             String        @id @default(cuid())
  subscriptionId String        @map("subscription_id")
  amount         Float
  currency       String
  status         PaymentStatus @default(PENDING)
  integrationId  String        @map("integration_id")
  transactionId  String?
  createdAt      DateTime      @default(now()) @map("created_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  integration  Integration  @relation(fields: [integrationId], references: [id])

  @@map("payments")
}

// App

enum IntegrationStatus {
  connected
  disconnected
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  widgets Widget[]

  @@map("products")
}

model Integration {
  id                 String            @id @default(cuid())
  provider           String
  ciphertext         String // Chave de API criptografada
  iv                 String // Vetor de inicialização para decriptação
  apiKey             String
  publicKey          String?
  secretKey          String
  webhookSecret      String?
  status             IntegrationStatus @default(disconnected)
  isActive           Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  organization       Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  availableGateway   AvailableGateway  @relation(fields: [availableGatewayId], references: [id], onDelete: Cascade)
  availableGatewayId String

  gatewayTransactions GatewayTransaction[]
  Payment             Payment[]
  Widget              Widget[]

  @@map("integrations")
}

model AvailableGateway {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  provider     String        @unique
  description  String?
  icon         String?
  domain       String?
  integrations Integration[]
}

model GatewayTransaction {
  id               String        @id @default(cuid())
  amount           Float
  currency         String
  status           PaymentStatus
  gatewayProvider  String
  gatewayReference String?       @map("gateway_reference")
  pixCode          String?       @map("pix_code")
  qrCodeUrl        String?       @map("qr_code_url")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String      @map("integration_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  widget   Widget? @relation(fields: [widgetId], references: [id], onDelete: SetNull)
  widgetId String? @map("widget_id")

  @@map("gateway_transactions")
}

model Widget {
  id          String     @id @default(cuid())
  name        String
  amount      Float
  description String?
  type        WidgetType @default(EMBED)
  widgetSlug  String?    @unique // Apenas para widgets do SHAREABLE
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  integration    Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  integrationId  String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  GatewayTransaction GatewayTransaction[] // Relacionado apenas se necessário

  @@map("widgets")
}

enum WidgetType {
  EMBED // Representa widgets embutidos (via iframe ou outra forma)
  SHAREABLE // Representa widgets acessíveis por links
}
